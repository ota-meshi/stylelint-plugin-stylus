(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{1094:function(t,e,s){"use strict";s.r(e);var r=s(67),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"stylus-selector-list-comma-space-after"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stylus-selector-list-comma-space-after"}},[t._v("#")]),t._v(" stylus/selector-list-comma-space-after")]),t._v(" "),s("blockquote",[s("p",[t._v("require a single space or disallow whitespace after the commas of selector lists.")])]),t._v(" "),s("ul",[s("li",[t._v("üîß The "),s("a",{attrs:{href:"https://stylelint.io/user-guide/usage/options#fix",target:"_blank",rel:"noopener noreferrer"}},[t._v("fix option"),s("OutboundLink")],1),t._v(" can automatically fix some of the problems reported by this rule.")])]),t._v(" "),s("h2",{attrs:{id:"rule-details"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[t._v("#")]),t._v(" üìñ Rule Details")]),t._v(" "),s("p",[t._v("This rule require a single space or disallow whitespace after the commas of selector lists.")]),t._v(" "),s("h2",{attrs:{id:"why-not-use-stylelint-rule"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#why-not-use-stylelint-rule"}},[t._v("#")]),t._v(" ‚ùì Why Not Use "),s("code",[t._v("stylelint")]),t._v(" Rule")]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"https://stylelint.io/user-guide/rules/selector-list-comma-space-after",target:"_blank",rel:"noopener noreferrer"}},[t._v("selector-list-comma-space-after"),s("OutboundLink")],1),t._v(" rule incorrectly report errors in Stylus."),s("br"),t._v("\nThis problem is that the core rules do not understand that can omit commas in Stylus."),s("br"),t._v("\nThe "),s("code",[t._v("stylus/selector-list-comma-space-after")]),t._v(" rule understands that can omit commas in Stylus.")]),t._v(" "),s("h2",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" üîß Options")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stylus/selector-list-comma-space-after"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),t._v(" | "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"never"')]),t._v(" | "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always-single-line"')]),t._v(" | "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"never-single-line"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"related-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#related-rules"}},[t._v("#")]),t._v(" üë´ Related rules")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://stylelint.io/user-guide/rules/selector-list-comma-space-after",target:"_blank",rel:"noopener noreferrer"}},[t._v("selector-list-comma-space-after"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"implementation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" üîç Implementation")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/ota-meshi/stylelint-plugin-stylus/blob/master/lib/rules/selector-list-comma-space-after.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rule source"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/ota-meshi/stylelint-plugin-stylus/blob/master/tests/lib/rules/selector-list-comma-space-after.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Test source"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);